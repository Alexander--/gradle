/**
 * We don't yet have support for Checkstyle in the Java Software Model. And we don't want to add non-model code
 * to configure the real Checkstyle extension, because it will hide some of the new-model configuration improvements.
 * So we configure a CheckstyleExtension without correctly wiring it for execution.
 *
 * This adds configuration-time weight without legacy overhead. The 'old-java-plugin' is configured in a similar way.
 */
import org.gradle.model.*

plugins {
    id 'jvm-component'
    id 'java-lang'
}

model {
    components {
        main(JvmLibrarySpec)
    }
    tasks {
        create("test", Test) {
            dependsOn "mainJar", "compileTestJava", "processTestResources"
        }
        create("compileTestJava", JavaCompile) {
            dependsOn "mainJar"
        }
        create("processTestResources", Copy) {

        }
        create("extraTask1", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask2", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask3", MyTaskClass) {
            description = name
            doLast {}
        }
        create("extraTask4", MyTaskClass) {
            description = name
            doLast {}
        }
    }
    tasks.check {
        dependsOn "test"
    }

    checkstyle(CheckstyleExtension) {
        ignoreFailures = true
    }

    tasks {
        create("configureAll")
        create("checkstyleMain", Checkstyle)
        create("checkstyleTest", Checkstyle)
        withType(Checkstyle, CheckstyleTaskDefaults)
    }

    custom(CustomExtension) {
        action = { println "" }
        value = "."
    }

    tasks {
        withType(MyTaskClass, TaskWiring)
    }

}

class CheckstyleTaskDefaults extends RuleSource {
    @Defaults
    void add(Checkstyle task, CheckstyleExtension extension) {
        task.ignoreFailures = extension.ignoreFailures
    }
}

@Managed
interface CheckstyleExtension {
    Boolean getIgnoreFailures()
    void setIgnoreFailures(Boolean flag)
}

@Managed
interface CustomExtension {
    @Unmanaged
    Closure<?> getAction()
    void setAction(Closure<?> action)
    String getValue()
    void setValue(String value)
}

class TaskWiring extends RuleSource {
    @Mutate
    void wire(MyTaskClass task, CustomExtension custom) {
        task.doLast(custom.action)
        10.times {
            task.description += custom.value
        }
    }
}

class MyTaskClass extends DefaultTask {

    @InputFiles
    FileCollection input

    @OutputFiles
    FileCollection output

    @Input
    boolean flag

}

class CheckstyleWiring extends RuleSource {
    @Mutate
    void wire(ModelMap<Task> tasks) {
        def build = tasks.get('build')
        tasks.withType(Checkstyle).all {
            build.dependsOn(it)
        }
        def configureAll = tasks.get('configureAll')
        tasks.all {
            if (it.name != 'configureAll') {
                configureAll.dependsOn(it)
            }
        }
    }
}

apply plugin: CheckstyleWiring
